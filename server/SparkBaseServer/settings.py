"""
Django settings for SparkBaseServer project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

# For google auth, see https://django-allauth.readthedocs.io/en/latest/installation.html

from pathlib import Path
from utils import get_config_json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
APP_CONFIG = get_config_json("config.json")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

SECRET_KEY = APP_CONFIG['secret_key']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # for allauth
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    # for REST Framework
    'rest_framework',
    'django_filters',

    'main.apps.MainConfig',
    'ui.apps.UiConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Support both local authentication and oauth authentication
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend'
]

# You can download this json from google developer's console
GOOGLE_CLIENT_SECRET = get_config_json("google-client-secret.json")
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id':    GOOGLE_CLIENT_SECRET['web']['client_id'],
            'secret':       GOOGLE_CLIENT_SECRET['web']['client_secret'],
        },
        'SCOPE': [
            'profile',
            'email',
            'openid'
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}
# by default, when google user login, their username is the firstname
# we want username changed to email
SOCIALACCOUNT_ADAPTER = "utils.google_account_adapter.GoogleAccountAdapter"

# This must be a valid site it, go to https://<your-site>/admin/ to check
# for all sites
SITE_ID = 3

# without this, the google oauth's callback wont be https
ACCOUNT_DEFAULT_HTTP_PROTOCOL='https'
LOGIN_REDIRECT_URL = '/'        # redirect after login
LOGOUT_REDIRECT_URL = '/'       # redirect after logout
ACCOUNT_LOGOUT_ON_GET = True    # We can use http get to signout

ROOT_URLCONF = 'SparkBaseServer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'SparkBaseServer.settings.ui_environment',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # required by 'allauth'
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'SparkBaseServer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE'  : 'django.db.backends.mysql',
        'NAME'    : APP_CONFIG['db']['db_name'],
        'USER'    : APP_CONFIG['db']['username'],
        'PASSWORD': APP_CONFIG['db']['password'],
        'HOST'    : APP_CONFIG['db']['server'],
        'PORT'    : APP_CONFIG['db'].get('port', 3306),
        'OPTIONS': {
            'sql_mode': 'STRICT_TRANS_TABLES',
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# provide some default context for django template
def ui_environment(request):
    return {
        "ENV_enable_js_debug": APP_CONFIG['enable_js_debug']
    }

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    # 'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    # 'DATETIME_INPUT_FORMATS': ['%Y-%m-%d %H:%M:%S'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20
}

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO','https')

